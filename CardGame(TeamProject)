main.cpp

#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>
#include "Player.h"
#include "Card.h"
#include "Shop.h"

using namespace std;

int main() {
    srand(time(0)); // 난수 초기화

    // 상점 초기화
    Shop shop;

    // 플레이어 초기화 (초기 돈: $100)
    Player player1("Human", 20, 100);
    Player computer("Computer", 20, 0);

    // 상점에서 카드 구매
    cout << "카드 상점에 오신 것을 환영합니다! 당신은 $" << player1.money << " 를 소지하고 있습니다.\n";
    while (true) {
        shop.DisplayInventory();
        cout << "카드의 번호를 입력하여 구매하고 싶은 카드를 선택하시오 (0 을 눌러 전투 시작): ";
        int choice;
        cin >> choice;
        if (choice == 0) break;
        shop.BuyCard(choice, player1);
        player1.DisplayMoney();
    }

    // 컴퓨터 덱 구성 (랜덤)
    vector<Card> cards = {
        Card("Dragon", 8, 6),
        Card("Knight", 2, 4),
        Card("Hunter", 4, 3),
        Card("Goblin", 2, 2),
        Card("Mage", 4, 4),
        Card("Beast", 3, 5),
        Card("Wall", 0, 10),
        Card("Robot", 3, 6),
        Card("Skeleton", 1, 1)
    };
    for (int i = 0; i < 10; ++i) {
        computer.deck.push_back(cards[rand() % cards.size()]);
    }

    // 게임 루프 시작
    cout << "\n전투가 시작됩니다...\n";
    int turn = 0;
    while (player1.IsAlive() && computer.IsAlive()) {
        cout << "\n\n\n=== " << turn + 1 << " 번째 턴 ===\n";

        if (turn % 2 == 0) { // 플레이어 턴
            cout << "Player 1 의 턴:\n";
            player1.DisplayField();
            player1.DrawCard();
            player1.Attack(computer);
        }
        else { // 컴퓨터 턴
            cout << "Computer 의 턴:\n";
            computer.DisplayField();

            // 컴퓨터가 랜덤으로 카드 배치
            int slot = rand() % 4;
            while (computer.field[slot] != nullptr) {
                slot = rand() % 4;
            }
            computer.field[slot] = new Card(computer.deck.back());
            computer.deck.pop_back();
            cout << "Computer 가 " << slot + 1 << "필드에 카드를 배치했습니다!\n";

            computer.Attack(player1);
        }

        // 승리 조건 체크
        if (!computer.IsAlive()) {
            cout << "Player 1 승!\n";
            break;
        }
        else if (!player1.IsAlive()) {
            cout << "Computer 승!\n";
            break;
        }

        turn++;
    }

    cout << "게임 오버...\n";
    return 0;
}


Player.cpp

#include "Player.h"
#include <iostream>
#include <cstdlib>
#include <ctime>

Player::Player(std::string n, int h, int m)
    : name(n), health(h), money(m), field(4, nullptr) {}

Player::~Player() {
    for (auto& card : field) {
        delete card; // 할당된 카드 삭제
    }
}

void Player::DisplayDeck() const {
    std::cout << name << "'의 덱:\n";
    for (size_t i = 0; i < deck.size(); ++i) {
        std::cout << i + 1 << ": ";
        deck[i].DisplayCard();
    }
}

void Player::AddCardToDeck(const Card& card) {
    deck.push_back(card);
}

void Player::SpendMoney(int amount) {
    money -= amount;
}

void Player::DisplayMoney() const {
    std::cout << name << "'의 돈: $" << money << "\n";
}

void Player::DrawCard() {
    if (deck.empty()) {
        std::cout << name << " 는 더이상 카드를 소지하고 있지 않습니다!\n";
        return;
    }

    // 덱에서 카드 선택
    DisplayDeck();
    int cardIndex = -1;
    while (true) {
        std::cout << "(1-" << deck.size() << ")중 낼 카드를 고르시오: ";
        std::cin >> cardIndex;
        if (cardIndex >= 1 && cardIndex <= static_cast<int>(deck.size())) {
            break;
        }
        std::cout << "존재하지 않습니다! 다시 고르시오.\n";
    }
    Card chosenCard = deck[cardIndex - 1];
    deck.erase(deck.begin() + cardIndex - 1);

    // 필드에 배치
    int slot = -1;
    while (true) {
        std::cout << " (1-4)필드 중 해당 카드를 설치한 필드를 고르시오: ";
        std::cin >> slot;
        if (slot >= 1 && slot <= 4 && field[slot - 1] == nullptr) {
            field[slot - 1] = new Card(chosenCard);
            break;
        }
        std::cout << "존재하지 않거나 이미 설치된 필드입니다! 다시 고르시오.\n";
    }
}

void Player::Attack(Player& opponent) {
    std::cout << "\n" << name << " 가 공격을 시도합니다!\n";
    for (int i = 0; i < 4; ++i) {
        if (field[i] != nullptr) {
            if (field[i]->attack == 0) {
                // 공격력이 0인 카드는 공격하지 않음
                continue;
            }

            if (opponent.field[i] != nullptr) {
                // 카드 vs 카드
                std::cout << field[i]->name << " 카드가 " << opponent.field[i]->name << "을(를) 공격했습니다!\n";
                opponent.field[i]->health -= field[i]->attack;

                // 체크: 체력이 0 이하인 카드 제거
                if (opponent.field[i]->health <= 0) {
                    std::cout << opponent.field[i]->name << " 카드를 파괴시켰습니다!\n";
                    delete opponent.field[i];
                    opponent.field[i] = nullptr;
                }
                if (field[i]->health <= 0) {
                    std::cout << field[i]->name << " 카드가 파괴되었습니다!\n";
                    delete field[i];
                    field[i] = nullptr;
                }
            }
            else {
                // 본체 공격
                std::cout << field[i]->name << " 카드가 " << opponent.name << " 을(를) 직접 공격하였습니다!\n";
                opponent.TakeDamage(field[i]->attack);
            }
        }
    }
}

void Player::TakeDamage(int damage) {
    health -= damage;
    if (health < 0) health = 0;
    std::cout << name << " takes " << damage << " damage! (Health: " << health << ")\n";
}

bool Player::IsAlive() const {
    return health > 0;
}

void Player::DisplayField() const {
    std::cout << name << "'s field:\n";
    for (int i = 0; i < 4; ++i) {
        std::cout << "Slot " << i + 1 << ": ";
        if (field[i] != nullptr) {
            field[i]->DisplayCard();
        }
        else {
            std::cout << "비어 있음\n";
        }
    }
}


Player.h

#pragma once
#ifndef PLAYER_H
#define PLAYER_H

#include "Card.h"
#include <vector>
#include <string>

class Player {
public:
    std::string name;
    int health;
    int money;
    std::vector<Card> deck;     // 덱: 카드 리스트
    std::vector<Card*> field;   // 필드: 4개의 슬롯 (nullptr일 수 있음)

    // 생성자 및 소멸자
    Player(std::string n, int h, int m);
    ~Player();

    // 멤버 함수 선언
    void DisplayDeck() const;
    void AddCardToDeck(const Card& card);
    void SpendMoney(int amount);
    void DisplayMoney() const;
    void DrawCard();
    void Attack(Player& opponent);
    void TakeDamage(int damage);
    bool IsAlive() const;
    void DisplayField() const;
};

#endif


Card.h

#pragma once
#ifndef CARD_H
#define CARD_H

#include <string>
#include <iostream>

class Card {
public:
    std::string name;
    int attack;
    int health;

    Card(std::string n, int a, int h) : name(n), attack(a), health(h) {}

    void DisplayCard() const {
        std::cout << name << " (공격력: " << attack << ", 체력: " << health << ")\n";
    }
};

#endif


Shop.h

#pragma once
#ifndef SHOP_H
#define SHOP_H

#include "Card.h"
#include "Player.h"
#include <vector>
#include <iostream>

class Shop {
private:
    std::vector<std::pair<Card, int>> inventory; // 카드와 가격 쌍

public:
    Shop() {
        // 초기 상점 카드와 가격 설정
        inventory.push_back({ Card("Dragon", 8, 6), 25 });
        inventory.push_back({ Card("Knight", 2, 4), 10 });
        inventory.push_back({ Card("Hunter",4, 3), 15 });
        inventory.push_back({ Card("Goblin", 2, 2), 6 });
        inventory.push_back({ Card("Mage", 4, 4), 17 });
        inventory.push_back({ Card("Beast", 3, 5), 18 });
        inventory.push_back({ Card("Wall", 0, 10), 10 });
        inventory.push_back({ Card("Robot", 3, 6), 20 });
        inventory.push_back({ Card("Skeleton", 1, 1), 3 });
    }

    void DisplayInventory() const {
        std::cout << "\n=== 상점 인벤토리 ===\n";
        for (size_t i = 0; i < inventory.size(); ++i) {
            std::cout << i + 1 << ": ";
            inventory[i].first.DisplayCard();
            std::cout << "가격: $" << inventory[i].second << "\n";
        }
    }

    void BuyCard(int index, Player& player) {
        if (index < 1 || index > static_cast<int>(inventory.size())) {
            std::cout << "존재하지 않습니다!\n";
            return;
        }

        int price = inventory[index - 1].second;
        if (player.money < price) {
            std::cout << "돈이 충분하지 않습니다!\n";
            return;
        }

        // 카드 구매
        player.SpendMoney(price);
        player.AddCardToDeck(inventory[index - 1].first);
        std::cout << player.name << " 카드를 구매했습니다 ";
        inventory[index - 1].first.DisplayCard();
        std::cout << "\n";
    }
};

#endif



